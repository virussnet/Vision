import time
import tkinter as tk
from tkinter import ttk, messagebox
import threading
import webbrowser
from PIL import Image, ImageTk, ImageSequence
import pystray
import sys
import os
import win32api
import win32con
import win32gui
import win32ts


def resource_path(relative_path):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏ –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤ """
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)


def configure_styles():
    """ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ """
    style = ttk.Style()
    style.theme_use('clam')
    style.configure('TFrame', background='#ffffff')
    style.configure('TLabel', background='#ffffff', foreground='#2d3436', font=('Arial', 11))
    style.configure('Main.TButton',
                    font=('Arial', 11, 'bold'),
                    width=35,
                    padding=10,
                    background='#74b9ff',
                    foreground='white',
                    borderwidth=0)
    style.map('Main.TButton',
              background=[('active', '#0984e3')],
              foreground=[('active', 'white')])
    style.configure('TEntry',
                    font=('Arial', 11),
                    padding=8,
                    bordercolor='#74b9ff',
                    lightcolor='#74b9ff',
                    fieldbackground='#f8f9fa')


class SessionMonitor:
    """ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π """

    def __init__(self):
        self.hWnd = win32gui.CreateWindowEx(0, "STATIC", "SessionMonitor", 0, 0, 0, 0, 0, 0, 0, 0, None)
        win32ts.WTSRegisterSessionNotification(self.hWnd, win32ts.NOTIFY_FOR_THIS_SESSION)

    def start(self):
        win32gui.PumpMessages()


class MainWindow:
    """ –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã """

    def __init__(self):
        self.root = tk.Tk()
        self.cat_frames = []
        self.last_short = time.time()
        self.last_long = time.time()
        self.setup_window()
        self.load_assets()
        self.create_widgets()
        self.setup_tray()
        self.start_session_monitor()
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

    def setup_window(self):
        """ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞ """
        self.root.title("–ó–∞—â–∏—Ç–∞ –∑—Ä–µ–Ω–∏—è | GroupSchumacher")
        self.root.geometry("370x360")
        self.root.resizable(False, False)
        configure_styles()
        self.center_window(self.root)
        try:
            self.root.iconbitmap(ICON_PATH)
        except Exception:
            pass

    def center_window(self, window):
        """ –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ """
        window.update_idletasks()
        width = window.winfo_width()
        height = window.winfo_height()
        x = (window.winfo_screenwidth() // 2) - (width // 2)
        y = (window.winfo_screenheight() // 2) - (height // 2)
        window.geometry(f'+{x}+{y}')

    def load_assets(self):
        """ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ """
        try:
            gif = Image.open(GIF_PATH)
            for img in ImageSequence.Iterator(gif):
                resized = img.copy().resize((220, 220))
                self.cat_frames.append(ImageTk.PhotoImage(resized))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")

    def create_widgets(self):
        """ –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ """
        main_frame = ttk.Frame(self.root)
        main_frame.pack(pady=20, padx=25, fill='both', expand=True)

        buttons = [
            ("‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä", self.start_timer),
            ("‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", self.toggle_pause),
            ("‚ö° –¢–µ—Å—Ç –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞", lambda: self.show_break("short")),
            ("üîã –¢–µ—Å—Ç –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞", lambda: self.show_break("long")),
            ("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", lambda: SettingsWindow(self)),
            ("‚Ñπ –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", lambda: AboutWindow(self))
        ]

        for text, cmd in buttons:
            btn = ttk.Button(main_frame, text=text, style='Main.TButton', command=cmd)
            btn.pack(pady=6)

    def start_timer(self):
        """ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ """
        threading.Thread(target=self.main_loop, daemon=True).start()

    def toggle_pause(self):
        """ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—É–∑—ã """
        global paused
        paused = not paused
        self.update_tray_menu()

    def show_break(self, break_type):
        """ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–∫–Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞ """
        global active_break
        active_break = True
        duration = short_break_duration if break_type == "short" else long_break_duration
        BreakWindow(self, break_type, duration)
        active_break = False

    def setup_tray(self):
        """ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è """
        try:
            image = Image.open(ICON_PATH)
        except FileNotFoundError:
            image = Image.new('RGB', (64, 64), color='white')

        menu = pystray.Menu(
            pystray.MenuItem('–û—Ç–∫—Ä—ã—Ç—å', lambda: self.root.deiconify()),
            pystray.MenuItem('–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', self.toggle_pause),
            pystray.MenuItem('–í—ã—Ö–æ–¥', self.quit_program)
        )
        self.tray_icon = pystray.Icon("tray_icon", image, "–ó–∞—â–∏—Ç–∞ –∑—Ä–µ–Ω–∏—è", menu)
        threading.Thread(target=self.tray_icon.run, daemon=True).start()

    def start_session_monitor(self):
        """ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Å—Å–∏–∏ """
        self.session_monitor = SessionMonitor()
        threading.Thread(target=self.session_monitor.start, daemon=True).start()

    def update_tray_menu(self):
        """ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ç—Ä–µ—è """
        if self.tray_icon: self.tray_icon.update_menu()

    def quit_program(self):
        """ –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã """
        global running
        running = False
        self.root.destroy()
        if self.tray_icon: self.tray_icon.stop()

    def on_closing(self):
        """ –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≤ —Ç—Ä–µ–π –≤–º–µ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏—è """
        self.root.withdraw()
        if self.tray_icon: self.tray_icon.visible = True

    def main_loop(self):
        """ –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π —Ü–∏–∫–ª """
        global running, paused, active_break, system_locked
        pause_start_time = 0

        while running:
            if not paused and not active_break and not system_locked:
                now = time.time()

                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                if system_locked and pause_start_time == 0:
                    pause_start_time = now
                elif not system_locked and pause_start_time > 0:
                    pause_duration = now - pause_start_time
                    self.last_long += pause_duration
                    self.last_short += pause_duration
                    pause_start_time = 0

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
                if (now - self.last_long >= long_break_interval and
                        (now - self.last_short >= MIN_BREAK_GAP)):
                    self.show_break("long")
                    self.last_long = self.last_short = time.time()

                elif (now - self.last_short >= short_break_interval and
                      (now - self.last_long >= MIN_BREAK_GAP)):
                    self.show_break("short")
                    self.last_short = time.time()

                time.sleep(1)
            else:
                time.sleep(0.5)


class BreakWindow:
    """ –û–∫–Ω–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ """

    def __init__(self, main_app, break_type, duration):
        self.main_app = main_app
        self.break_type = break_type
        self.duration = duration
        self.cat_frames = main_app.cat_frames

        self.setup_window()
        self.create_content()
        self.main_app.root.wait_window(self.window)

    def setup_window(self):
        """ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞ """
        self.dim_window = tk.Toplevel(self.main_app.root)
        self.dim_window.attributes("-fullscreen", True)
        self.dim_window.attributes("-alpha", 0.93)
        self.dim_window.configure(bg="#2d3436")
        self.dim_window.attributes("-topmost", True)

        self.window = tk.Toplevel(self.main_app.root)
        self.window.title("–°–¥–µ–ª–∞–π –ø–µ—Ä–µ—Ä—ã–≤ -))")
        self.window.geometry("400x530")
        self.window.resizable(False, False)
        self.window.attributes("-topmost", True)
        self.center_window(self.window)
        self.window.grab_set()
        self.window.focus_force()
        self.window.protocol("WM_DELETE_WINDOW", self.close)

    def create_content(self):
        """ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–∫–Ω–∞ """
        main_frame = ttk.Frame(self.window)
        main_frame.pack(pady=25, padx=30, fill='both', expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = "–ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤!" if self.break_type == "short" else "–î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤!"
        ttk.Label(main_frame, text=title, font=('Arial', 14, 'bold')).pack(pady=15)

        # –ê–Ω–∏–º–∞—Ü–∏—è
        if self.cat_frames:
            self.animation_label = ttk.Label(main_frame)
            self.animation_label.pack()
            self.animate(0)

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        message = ("–ü–æ–º–æ—Ä–≥–∞–π—Ç–µ –≥–ª–∞–∑–∞–º–∏ 10 —Ä–∞–∑!\n–†–∞—Å—Å–ª–∞–±—å—Ç–µ –º—ã—à—Ü—ã –ª–∏—Ü–∞."
                   if self.break_type == "short" else
                   "1. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–¥–∞–ª—å\n2. –°–¥–µ–ª–∞–π—Ç–µ –≤—Ä–∞—â–µ–Ω–∏—è –≥–ª–∞–∑–∞–º–∏\n3. –ó–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞ –Ω–∞ 5 —Å–µ–∫")
        ttk.Label(main_frame, text=message, justify='center').pack(pady=15)

        # –¢–∞–π–º–µ—Ä
        self.time_label = ttk.Label(main_frame, text=f"–û—Å—Ç–∞–ª–æ—Å—å: {self.duration} —Å–µ–∫", font=('Arial', 12, 'bold'))
        self.time_label.pack(pady=15)

        # –ö–Ω–æ–ø–∫–∞
        ttk.Button(main_frame, text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", style='Main.TButton', command=self.close).pack(pady=10)
        self.update_timer()

    def animate(self, frame_idx):
        """ –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ—Ç–∞ """
        if hasattr(self, 'animation_label') and self.animation_label.winfo_exists():
            self.animation_label.configure(image=self.cat_frames[frame_idx])
            self.window.after(1000, self.animate, (frame_idx + 1) % len(self.cat_frames))

    def update_timer(self):
        """ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ """
        if self.duration > 0 and self.window.winfo_exists():
            self.duration -= 1
            self.time_label.config(text=f"–û—Å—Ç–∞–ª–æ—Å—å: {self.duration} —Å–µ–∫")
            self.window.after(1000, self.update_timer)
        else:
            self.close()

    def close(self):
        """ –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ """
        global active_break
        active_break = False

        # –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–æ–≤
        if self.break_type == "short":
            self.main_app.last_short = time.time()
        else:
            self.main_app.last_long = time.time()

        if self.dim_window.winfo_exists(): self.dim_window.destroy()
        if self.window.winfo_exists(): self.window.destroy()

    def center_window(self, window):
        """ –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ """
        window.update_idletasks()
        width = window.winfo_width()
        height = window.winfo_height()
        x = (window.winfo_screenwidth() // 2) - (width // 2)
        y = (window.winfo_screenheight() // 2) - (height // 2)
        window.geometry(f'+{x}+{y}')


class SettingsWindow:
    """ –û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ """

    def __init__(self, main_app):
        self.main_app = main_app
        self.window = tk.Toplevel(self.main_app.root)
        self.setup_window()
        self.create_widgets()

    def setup_window(self):
        self.window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.window.geometry("400x400")
        self.window.resizable(False, False)
        self.main_app.center_window(self.window)

    def create_widgets(self):
        main_frame = ttk.Frame(self.window)
        main_frame.pack(pady=25, padx=30, fill='both', expand=True)

        ttk.Label(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤", font=('Arial', 14, 'bold')).pack(pady=(0, 20))

        fields = [
            ("–ö–æ—Ä–æ—Ç–∫–∏–µ –ø–µ—Ä–µ—Ä—ã–≤—ã (–º–∏–Ω):", short_break_interval // 60),
            ("–î–ª–∏–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã (–º–∏–Ω):", long_break_interval // 60),
            ("–î–ª–∏—Ç. –∫–æ—Ä–æ—Ç–∫–æ–≥–æ (—Å–µ–∫):", short_break_duration),
            ("–î–ª–∏—Ç. –¥–ª–∏–Ω–Ω–æ–≥–æ (–º–∏–Ω):", long_break_duration // 60)
        ]

        self.entries = []
        for text, value in fields:
            frame = ttk.Frame(main_frame)
            frame.pack(pady=8, fill='x')
            ttk.Label(frame, text=text).pack(side='left')
            entry = ttk.Entry(frame, width=8, style='TEntry')
            entry.insert(0, str(value))
            entry.pack(side='right')
            self.entries.append(entry)

        ttk.Button(main_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", style='Main.TButton', command=self.save_settings).pack(
            pady=20)

    def save_settings(self):
        global short_break_interval, long_break_interval, short_break_duration, long_break_duration
        try:
            short_break_interval = int(self.entries[0].get()) * 60
            long_break_interval = int(self.entries[1].get()) * 60
            short_break_duration = int(self.entries[2].get())
            long_break_duration = int(self.entries[3].get()) * 60
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            self.window.destroy()
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!")


class AboutWindow:
    """ –û–∫–Ω–æ '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ' """

    def __init__(self, main_app):
        self.main_app = main_app
        self.window = tk.Toplevel(self.main_app.root)
        self.setup_window()
        self.create_widgets()

    def setup_window(self):
        self.window.title("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        self.window.geometry("360x280")
        self.window.resizable(False, False)
        self.main_app.center_window(self.window)

    def create_widgets(self):
        main_frame = ttk.Frame(self.window)
        main_frame.pack(pady=25, padx=30, fill='both', expand=True)

        text = """–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –õ—è—Ö –í–∏—Ç–∞–ª–∏–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á
–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç 1–° | –û–û–û "–®—É–º–∞—Ö–µ—Ä"

–ó—Ä–µ–Ω–∏–µ - –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. 
–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –ø–æ–º–æ–≥–∞—é—Ç:
- –°–Ω–∏–∑–∏—Ç—å —É—Å—Ç–∞–ª–æ—Å—Ç—å –≥–ª–∞–∑
- –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–∏–Ω–¥—Ä–æ–º —Å—É—Ö–æ–≥–æ –≥–ª–∞–∑–∞
- –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Å—Ç—Ä–æ—Ç—É –∑—Ä–µ–Ω–∏—è"""

        ttk.Label(main_frame, text=text, justify='left').pack(pady=10)
        ttk.Button(main_frame, text="–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º", style='Main.TButton',
                   command=lambda: webbrowser.open("https://t.me/vitalyliakh")).pack(pady=15)


# ===== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ =====
ICON_PATH = resource_path("icon.ico")
GIF_PATH = resource_path("cat.gif")
short_break_interval = 10 * 60  # 10 –º–∏–Ω—É—Ç
long_break_interval = 50 * 60  # 50 –º–∏–Ω—É—Ç
short_break_duration = 8  # 8 —Å–µ–∫—É–Ω–¥
long_break_duration = 5 * 60  # 5 –º–∏–Ω—É—Ç
running = True
paused = False
active_break = False
system_locked = False
MIN_BREAK_GAP = 60  # 1 –º–∏–Ω—É—Ç–∞

if __name__ == "__main__":
    app = MainWindow()
    app.root.mainloop()